Windows Compile and Installation Instructions
=============================================

You will need Visual Studio, as well as several pre-requisits in order to
compile rsyncrypto on Windows. The following libraries are needed:
OpenSSL (http://www.openssl.org/)
Argtable2 (http://argtable.sourceforge.net/)

In order to use rsyncrypto (not needed for the compilation stage) you will
also need a patched version of gzip that support the "--rsyncable" flag. A
compiled binary is available with rsyncrypto's windows binary release.
Alternatively, you can also download the sources from http://www.gzip.org/ and
apply the patch under the contrib folder of the rsyncrypto sources.

The rsyncrypto sources contain a file called "rsyncrypto.dsw", which is a
standard Visual Studio 6 workspace file. Rsyncrypto can be compiled using
either the GUI or rsyncrypto.mak, but certain preliminary steps must be taken
for all the libraries to be found.

OpenSSL Installation
====================
Nothing special here. Follow the usual installation procedure. If you manage
to get precompiled binaries, feel free to use them. Rsyncrypto requires a
version of OpenSSL new enough to contain AES, but any relatively recent version
of OpenSSL qualifies for that. Later versions fix security holes, so it is
recommended to get a later one.

As before, you will need to add both the OpenSSL include paths (directory inc32
under the source compiled version) and the library path (out32dll) to Visual
Studio's search path.

If you are compiling your own, it is highly recommended that you use either
MASM or NASM to compile assmebly versions of the encryption modules, as that
will speed up rsyncrypto.

Argtable2 Installation
======================
Again, the standard installation procedure applies. The directories to add are
the "src" subdir for both include path and library path.

Compiling Rsyncrypto
====================
Just double click on the rsyncrypto.sln file and press "compile". There are a
couple of known warnings in crypto.cpp regarding signed/unsigned comparisons.
They are a result of difference of signness of "off_t" between posix platforms,
where it is unsigned, and Windows, where it is signed. If someone can come up
with a platform independent solution, they will receive official "thanks" in
the Authors file.

Historical Note
===============
Rsyncrypto used to demand STLPort for compilation. As part of the move from
Visual Studio 6 to Visual Studio 2008 this requirement was removed.